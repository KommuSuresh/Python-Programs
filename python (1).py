# -*- coding: utf-8 -*-
"""python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15dmCdvS5GymBe4HpVoySaFLtRYBpJgpc

#Variables and Data Types

Variables:

Declaration:
age = 25

 Naming Rules :
full_name = "John Doe"

Numeric Data Types:
"""

# Integer
num1 = 10
print("num1 :",type(num1))

# Float
num2 = 3.14
print("num2 :",type(num2))

# Complex
num3 = 2 + 3j
print("num3 :",type(num3))

"""Strings:


"""

name = "Alice"
print("name :",type(name))

# Manipulation
greeting = "Hello, " + name
print(greeting)

"""Booleans:"""

# Boolean Variables Example
python = True
Javascript = False

if python:
    print("It's a python")
else:
    print("It's Javascript")

"""#Operators and Expressions:

Arithmetic Operators: +, -, *, /, //, %, **
"""

num1 = 10
num2 = 3

addition = num1 + num2
subtraction = num1 - num2
multiplication = num1 * num2
division = num1 / num2
floor_division = num1 // num2
modulus = num1 % num2
exponentiation = num1 ** num2

print("Addition:", addition)            # Output: 13
print("Subtraction:", subtraction)      # Output: 7
print("Multiplication:", multiplication)  # Output: 30
print("Division:", division)            # Output: 3.3333333333333335
print("Floor Division:", floor_division) # Output: 3
print("Modulus:", modulus)              # Output: 1
print("Exponentiation:", exponentiation) # Output: 1000

"""Comparison Operators: ==, !=, >, <, >=, <=

---


"""

age = 25

is_adult = age >= 18
is_teenager = age > 12 and age < 18
is_child = age <= 12

print("Is Adult:", is_adult)       # Output: True
print("Is Teenager:", is_teenager) # Output: True
print("Is Child:", is_child)       # Output: False

"""Logical Operators: and, or, not"""

# Logical Operators Example
x = 5

print(x > 3 and x < 10)   # True

x = 5
print(x > 3 or x < 10)   # True

x = 5

print(not(x > 3 and x < 10)) #False

"""Assignment Operators: =, +=, -=, *=, /="""

# Assignment Operators Example
x = 10

x += 5
print("After x += 5:", x)  # Output: 15

x -= 3
print("After x -= 3:", x)  # Output: 12

x *= 2
print("After x *= 2:", x)  # Output: 24

x /= 4
print("After x /= 4:", x)  # Output: 6.0

"""#Conditional Statements:

if statement:
"""

x = 10

if x > 5:
    print("x is greater than 5")

"""else and elif:"""

marks = 85
if marks >= 90:
    print("Grade: A")
elif marks >= 80:
    print("Grade: B")
else:
    print("Grade: C")

"""Nested conditionals:"""

num = 15
if num > 0:
    if num % 2 == 0:
        print("Positive even number.")
    else:
        print("Positive odd number.")
else:
    print("Non-positive number.")

"""#Loops:

for loop

Write a program to enter the numbers till the user wants and at the end it should display the sum of all the numbers entered.
"""

n=int(input("enter a num:"))
sum=0
for i in range(1,1n+1):
  i=int(input())
  sum=sum+i
print("total sum is :",sum)

"""Write a program to enter the numbers till the user enter ZERO and at the end it should display the count of positive and negative numbers entered."""

i=int(input())
count1=0
count2=0
sum=0
for i in range(1,n+1):
  i=int(input())
  if i>1:
    count1+=1
  else:
    count2+=1
print("positvie num are:",count1)
print("negatium are:",count1)

"""while loop

Write a program to print the factorial of a number accepted from user.
"""

n=int(input("enter a num:"))
fact=1
i=1
if n==0:
  print("1")
elif n>1:
  while i<=n:
    fact=fact*i
    i+=1
  print("fact of {}".format(fact))

"""Write a program to print the Fibonacci series till n terms (Accept n from user) using while loop."""

n=int(input())
a=0
b=1
count=2
print(a)
print(b)
while count<n:
  c=a+b
  print(c)
  count+=1
  a=b
  b=c

"""Write a program to reverse the number accepted from user using while loop."""

n=int(input("enter a num:"))
rev=0
while n>0:
  m=n%10
  rev=rev*10+m
  n=n//10
print(rev)

"""Write a program to check whether a number is prime or not using while loop."""

n=int(input("eneter num:"))
i=2
while i<=n-1:
  if n%i==0:
    print("{} is not a prime num".format(n))
    break
  i+=1
else:
  print("{} is prime num".format(n))

"""#Data Structures:

#List

Lists: Creation, Indexing, Slicing, List Methods
"""

my_list = [1, 2, 3, 4, 5]

# Indexing - Accessing elements
print(my_list[0])    # Output: 1
print(my_list[2])    # Output: 3

# Slicing - Extracting a sublist
sub_list = my_list[1:4]
print(sub_list)      # Output: [2, 3, 4]

# List methods
my_list.append(6)    # Add an element at the end
my_list.insert(2, 7)  # Insert 7 at index 2
my_list.remove(3)    # Remove the first occurrence of 3
print(my_list)       # Output: [1, 2, 7, 4, 5, 6]

"""List Comprehension:"""

# Creating a list using list comprehension
squared_numbers = [x**2 for x in range(1, 6)]
print(squared_numbers)  # Output: [1, 4, 9, 16, 25]

# Filtering elements using list comprehension
even_numbers = [x for x in range(1, 11) if x % 2 == 0]
print(even_numbers)     # Output: [2, 4, 6, 8, 10]

""" Nested Lists:"""

# Creating a nested list
matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# Accessing elements in a nested list
print(matrix[1][2])     # Output: 6

# Modifying elements in a nested list
matrix[0][1] = 0
print(matrix)           # Output: [[1, 0, 3], [4, 5, 6], [7, 8, 9]]

"""Write a Python program that takes a list of numbers as input and prints the sum of all the numbers."""

no_of_inputs=int(input())
list_new=[int(input()) for i in range(no_of_inputs)]
sum_of_elements=0
for i in list_new:
  sum_of_elements+=i
print("sum of elements are {}".format(sum_of_elements))

"""Write a Python program that takes a list of strings as input and prints a new list with only the strings that have more than 5 characters."""

no_of_inputs=int(input())
list_new=[input() for i in range(no_of_inputs)]
for i in list_new:
  if len(i)>5:
    print(i)

"""Write a Python program that takes a list of numbers as input and prints the average of all the numbers.Write a Python program that takes a list of numbers as input and returns the product of all the numbers in the list."""

no_of_inputs=int(input())
list_new=[int(input()) for i in range(no_of_inputs)]
sum_of_elements=1
for i in list_new:
  sum_of_elements*=i
print("product of elements are {}".format(sum_of_elements))

"""Write a Python program that takes a list of numbers as input and returns a new list with only the prime numbers from the original list."""

no_of_inputs = int(input())
list_new = [int(input()) for k in range(no_of_inputs)]

for num in list_new:
    if num < 2:
        print("{} is not a prime number".format(num))
    else:
        is_prime = True # 1 for true
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                is_prime = False # o for false
                break

        if is_prime:
            print("{} is a prime number".format(num))
        else:
            print("{} is not a prime number".format(num))

"""#automorphic number"""

n=int(input("enter a number:"))  #25
power_of_given_num=n**2  #625
length=len(str(n)) #2
if str(n)==str(power_of_given_num)[-length:]: # 25== 625[-2:]
  print("{} is automorphic number".format(n))
else:
  print("{} is not a automorphic number".format(n))

"""Harshad number"""

n=int(input("enter a number:"))
sum=0
j=n
while n>0:
  m=n%10
  sum+=m
  n=n//10
if j%sum==0:
  print(f"{j} is harshad number")
else:
  print(f"{j} is not harshad number")

"""#Tuples

Creating and Accessing Tuples:
"""

# Creating a tuple
my_tuple = (1, 2, 3, 'hello', 'world')

# Accessing elements in a tuple
print(my_tuple[0])      # Output: 1
print(my_tuple[3])      # Output: 'hello'

"""Tuple Unpacking:"""

# Tuple unpacking
x, y, z = (10, 20, 30)
print(x)               # Output: 10
print(y)               # Output: 20
print(z)               # Output: 30

"""#set"""

# Sets of students in different courses
physics_students = {'John', 'Alice', 'Bob', 'Eve'}
math_students = {'Bob', 'Eve', 'Sara', 'David'}
chemistry_students = {'Alice', 'Eve', 'Peter', 'David'}

# Set operations
all_students = physics_students.union(math_students, chemistry_students)  # Union of all students
physics_and_math = physics_students.intersection(math_students)          # Intersection of Physics and Math students
physics_or_chem = physics_students.union(chemistry_students)              # Union of Physics and Chemistry students
math_but_not_physics = math_students.difference(physics_students)         # Math students who are not in Physics

# Checking for subsets
is_physics_subset = physics_students.issubset(all_students)               # Check if Physics students are a subset of all students
is_physics_superset = all_students.issuperset(physics_students)           # Check if all students contain Physics students

# Removing duplicates from a list using set
some_list = [1, 2, 3, 3, 4, 5, 4, 6]
unique_items = set(some_list)
print("List with duplicates:", some_list)
print("List with duplicates removed:", list(unique_items))

"""#Dictionaries"""

# Creating a dictionary
student_scores = {'Alice': 85, 'Bob': 92, 'Charlie': 78, 'David': 90}

# Accessing values by keys
print(student_scores['Alice'])  # Output: 85

# Adding a new key-value pair
student_scores['Eve'] = 95

# Checking if a key exists
if 'Charlie' in student_scores:
    print("Charlie's score:", student_scores['Charlie'])  # Output: Charlie's score: 78

# Dictionary Methods
# Getting all keys as a list
keys = student_scores.keys()
print(keys)  # Output: dict_keys(['Alice', 'Bob', 'Charlie', 'David', 'Eve'])

# Getting all values as a list
values = student_scores.values()
print(values)  # Output: dict_values([85, 92, 78, 90, 95])

# Removing a key-value pair
removed_score = student_scores.pop('David')
print("Removed David's score:", removed_score)  # Output: Removed David's score: 90

# Iterating through keys and values
for name, score in student_scores.items():
    print(name, "scored", score)
# Output:
# Alice scored 85
# Bob scored 92
# Charlie scored 78
# Eve scored 95

"""#Functions

Defining Functions:
"""

def square(x):
    return x * x
result = square(5)
print(result)  # Output: 25

"""Arguments:"""

# Positional arguments:
def area_rectangle(length, width):
    return length * width

result = area_rectangle(5, 3)
print(result)  # Output: 15

# Keyword arguments:
def print_person_info(name, age):
    print("Name:", name)
    print("Age:", age)
print_person_info(name="John", age=30)

"""Variable Scope:"""

global_var = 10

def my_function():
    local_var = 5
    print("Local variable inside the function:", local_var)
    print("Global variable inside the function:", global_var)

my_function()
print("Global variable outside the function:", global_var)

"""#Lambda Functions:

Using Lambda with map()
"""

numbers = [1, 2, 3, 4, 5]
squared_numbers = list(map(lambda x: x**2, numbers))

print(squared_numbers)

"""Using Lambda with filter()"""

numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

even_numbers = list(filter(lambda x: x % 2 == 0, numbers))

print(even_numbers)

"""#Built in functions

ceil and floor
"""

import math

num_ceil = math.ceil(3.7)
print(num_ceil)  # Output: 4

num_floor = math.floor(3.7)
print(num_floor)  # Output: 3

"""round"""

num_rounded = round(3.7)
print(num_rounded)  # Output: 4

num_rounded_decimals = round(3.742, 1)
print(num_rounded_decimals)  # Output: 3.7

"""enumerate"""

fruits = ['apple', 'banana', 'orange', 'grape']
for index, fruit in enumerate(fruits):
    print(f"Index {index}: {fruit}")

"""#problems"""

#prime num in give range
start=int(input())
end=int(input())
for i in range(start,end+1):
    flag=0
    for j in range(2,i):
        if i%j==0:
            flag=1
            break
    if flag==0:
        print(i,end=" ")

#given list prime numbers
l=[23,45,5,3,2545,5,6,65,75]
for j in l:
    flag=0
    for i in range(2,j):
        if j%i==0:
            flag=1
            break
    if flag==0:
        print(j,end=' ')

#Sum of squares of first n natural


n=int(input())
sum=0
for i in range(1,n+1):
    sum+=i**2
print(sum)

# Find Largest Element in an Array

l=[1,2,3,4,5,6,35]
max=0
for i in l:
    if i>max:
        max=i
        i+=1
print(max)

#Find Sum of Array

l=[1000,1000,1000]
print(sum(l))

#Array Rotation

l=[1,2,3,4]
l2=[4,3,2,1]
n=len(l)
for i in range(n//2):
    l[i],l[n-i-1]=l[n-i-1],l[i]
print(l)

#Swap Two Elements in a List

pos1=int(input())
pos2=int(input())
l=[1,2,3,4]
l[pos1],l[pos2]=l[pos2],l[pos1]
print(l)

#find smallest number in a list

l=[1,2,3,4]
min=l[0]
for i in range(len(l)):
    if l[i]<min:
        min=l[i]
print(min)

# Find Largest Element in an Array

l=[1,2,3,4,5,6,35]
max=0
for i in l:
    if i>max:
        max=i
        i+=1
print(max)